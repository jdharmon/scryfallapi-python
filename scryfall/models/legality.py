# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class Legality(Model):
    """Legality.

    :param standard: Possible values include: 'legal', 'not_legal'
    :type standard: str or ~scryfall.models.LegalStatus
    :param future: Possible values include: 'legal', 'not_legal'
    :type future: str or ~scryfall.models.LegalStatus
    :param frontier: Possible values include: 'legal', 'not_legal'
    :type frontier: str or ~scryfall.models.LegalStatus
    :param modern: Possible values include: 'legal', 'not_legal'
    :type modern: str or ~scryfall.models.LegalStatus
    :param legacy: Possible values include: 'legal', 'not_legal'
    :type legacy: str or ~scryfall.models.LegalStatus
    :param pauper: Possible values include: 'legal', 'not_legal'
    :type pauper: str or ~scryfall.models.LegalStatus
    :param vintage: Possible values include: 'legal', 'not_legal'
    :type vintage: str or ~scryfall.models.LegalStatus
    :param penny: Possible values include: 'legal', 'not_legal'
    :type penny: str or ~scryfall.models.LegalStatus
    :param commander: Possible values include: 'legal', 'not_legal'
    :type commander: str or ~scryfall.models.LegalStatus
    :param onev_one: Possible values include: 'legal', 'not_legal'
    :type onev_one: str or ~scryfall.models.LegalStatus
    :param duel: Possible values include: 'legal', 'not_legal'
    :type duel: str or ~scryfall.models.LegalStatus
    :param brawl: Possible values include: 'legal', 'not_legal'
    :type brawl: str or ~scryfall.models.LegalStatus
    """

    _attribute_map = {
        'standard': {'key': 'standard', 'type': 'LegalStatus'},
        'future': {'key': 'future', 'type': 'LegalStatus'},
        'frontier': {'key': 'frontier', 'type': 'LegalStatus'},
        'modern': {'key': 'modern', 'type': 'LegalStatus'},
        'legacy': {'key': 'legacy', 'type': 'LegalStatus'},
        'pauper': {'key': 'pauper', 'type': 'LegalStatus'},
        'vintage': {'key': 'vintage', 'type': 'LegalStatus'},
        'penny': {'key': 'penny', 'type': 'LegalStatus'},
        'commander': {'key': 'commander', 'type': 'LegalStatus'},
        'onev_one': {'key': '1v1', 'type': 'LegalStatus'},
        'duel': {'key': 'duel', 'type': 'LegalStatus'},
        'brawl': {'key': 'brawl', 'type': 'LegalStatus'},
    }

    def __init__(self, standard=None, future=None, frontier=None, modern=None, legacy=None, pauper=None, vintage=None, penny=None, commander=None, onev_one=None, duel=None, brawl=None):
        super(Legality, self).__init__()
        self.standard = standard
        self.future = future
        self.frontier = frontier
        self.modern = modern
        self.legacy = legacy
        self.pauper = pauper
        self.vintage = vintage
        self.penny = penny
        self.commander = commander
        self.onev_one = onev_one
        self.duel = duel
        self.brawl = brawl
